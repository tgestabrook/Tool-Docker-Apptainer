name: Build and push Docker images

## Run every time a change is pushed to the identified branch,
## or when a pull request is made to the branch;
## Also (re-)run on schedule.
on:
  schedule:
    ## build/rebuild on 1st/15th day of month at 09:40
    ## NOTE: GitHub disables scheduled builds if no repo activity for 60 days;
    ##       to re-enable, edit the cron schedule values.
    - cron: '40 9 1,15 * *'
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # - dockercontext: ./Clean_Docker_LANDIS-II_7_AllExtensions
          #   dockerfile: ./Clean_Docker_LANDIS-II_7_AllExtensions/Dockerfile
          #   image: ghcr.io/${{ github.repository_owner }}/landis-ii-v7-linux
          # - dockercontext: ./Clean_Docker_LANDIS-II_8_AllExtensions
          #   dockerfile: ./Clean_Docker_LANDIS-II_8_AllExtensions/Dockerfile
          #   image: ghcr.io/${{ github.repository_owner }}/landis-ii-v8-linux
          - dockercontext: ./Clean_Docker_LANDIS-II_8_Latest_Commits
            dockerfile: ./Clean_Docker_LANDIS-II_8_Latest_Commits/Dockerfile
            image: ghcr.io/${{ github.repository_owner }}/landis-ii-v8-latest
          - dockercontext: .
            dockerfile: ./Docker-LANDIS-II-v7-release/Dockerfile
            image: ghcr.io/${{ github.repository_owner }}/landis-ii-v7-release
          - dockercontext: .
            dockerfile: ./Docker-LANDIS-II-v8-release/Dockerfile
            image: ghcr.io/${{ github.repository_owner }}/landis-ii-v8-release
          - dockercontext: .
            dockerfile: ./Docker-LANDIS-II-v8-Rstudio/Dockerfile
            image: ghcr.io/${{ github.repository_owner }}/landis-ii-v8-Rstudio
    
    ## Set the permissions granted to the `GITHUB_TOKEN` for the actions in this job
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      ## Login against a Docker registry except on PR
      ## https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      ## Extract metadata (tags, labels) for Docker
      ## https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ matrix.image }}

      ## Build and push Docker image with Buildx (don't push on PR)
      ## https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ${{ matrix.dockercontext }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      ## Generates an artifact attestation for image build provenance
      ## https://github.com/actions/attest-build-provenance
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ matrix.image }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

